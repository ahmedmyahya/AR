<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>3D Model Viewer</title>
    <style>
      body,
      html {
        margin: 0;
        padding: 0;
        height: 100%;
        background: #111;
        color: white;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }
      #viewer-container {
        width: 90vw;
        height: 90vh;
        background: #222;
      }
    </style>
  </head>
  <body>
    <h1>3D Model Viewer</h1>
    <div id="viewer-container"></div>

    <script type="module">
      // Safely inject modelPath string from EJS to JS
      const modelPath = <%- JSON.stringify(modelPath) %>;
      console.log("Model path:", modelPath);

      import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js';
      import { GLTFLoader } from 'https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/loaders/GLTFLoader.js';

      const container = document.getElementById('viewer-container');

      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(
        75,
        container.clientWidth / container.clientHeight,
        0.1,
        1000
      );

      const renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(container.clientWidth, container.clientHeight);
      container.appendChild(renderer.domElement);

      const ambientLight = new THREE.AmbientLight(0xffffff, 1);
      scene.add(ambientLight);

      const loader = new GLTFLoader();
      const modelURL = "/uploads/" + modelPath;

      loader.load(
        modelURL,
        (gltf) => {
          scene.add(gltf.scene);
          camera.position.set(0, 1.5, 3);
          animate();
        },
        undefined,
        (error) => {
          console.error("Error loading model:", error);
          container.innerHTML = "<p style='color:red;'>Failed to load model.</p>";
        }
      );

      function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
      }

      window.addEventListener('resize', () => {
        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
      });
    </script>
  </body>
</html>
