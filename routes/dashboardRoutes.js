// routes/dashboardRoutes.js
const express = require("express");
const router = express.Router();
const multer = require("multer");
const { User, Model } = require("../database");
const {
  getMulterDestination,
  getMulterFilename,
} = require("../services/fileStorage");
const { generateThumbnail } = require("../services/thumbnailGenerator");
const path = require("path");
const fs = require("fs").promises;
const { Op } = require("sequelize"); // Ensure Op is imported for queries
const { validateModel, handleValidationErrors } = require("../middleware/auth"); // For model validation

// Multer setup for file uploads
const upload = multer({
  storage: multer.diskStorage({
    destination: getMulterDestination(),
    filename: getMulterFilename(),
  }),
  fileFilter: (req, file, cb) => {
    // Basic file type check
    if (
      file.mimetype.startsWith("model/") ||
      file.mimetype.includes("glb") ||
      file.mimetype.includes("gltf")
    ) {
      cb(null, true);
    } else {
      cb(
        new Error("Invalid file type. Only GLB, GLTF, OBJ, FBX are allowed."),
        false
      );
    }
  },
});

// Dashboard View
router.get("/", async (req, res) => {
  const username = req.session.user;
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const offset = (page - 1) * limit;

  try {
    const { count, rows: models } = await Model.findAndCountAll({
      where: { username: username },
      order: [["createdAt", "DESC"]],
      limit: limit,
      offset: offset,
    });

    const totalPages = Math.ceil(count / limit);

    res.render("dashboard", {
      user: res.locals.user, // Passed from global middleware
      username: username,
      models: models,
      totalModels: count,
      currentPage: page,
      totalPages: totalPages,
      limit: limit,
      error: res.locals.error,
      success: res.locals.success,
    });
  } catch (error) {
    console.error("Error fetching dashboard models:", error);
    res.status(500).render("error", {
      message: "Could not retrieve your models. Please try again later.",
      status: 500,
    });
  }
});

// Upload Model Page
router.get("/upload", (req, res) => {
  res.render("upload", {
    user: res.locals.user,
    error: res.locals.error,
    success: res.locals.success,
  });
});

// Handle Model Upload
router.post(
  "/upload",
  upload.single("modelFile"), // Use 'modelFile' as the input name in your EJS form
  validateModel,
  handleValidationErrors,
  async (req, res) => {
    const username = req.session.user;

    if (!req.file) {
      req.session.error = "No file uploaded or file type not supported.";
      return res.redirect("/dashboard/upload");
    }

    const { name, tags } = req.body;
    const originalFilename = req.file.originalname;
    const savedFilename = req.file.filename;
    const filePath = path.join(username, savedFilename); // Store path relative to public/uploads

    let thumbnailPath = null;
    try {
      // Generate thumbnail
      const modelUrl = `${res.locals.baseUrl}/uploads/${filePath}`;
      const thumbnailFilename = `${
        path.parse(savedFilename).name
      }_thumbnail.png`;
      thumbnailPath = await generateThumbnail(
        modelUrl,
        thumbnailFilename,
        username,
        res.locals.baseUrl
      );

      const model = await Model.create({
        username: username,
        name: name,
        filename: savedFilename, // Store just the filename generated by Multer
        filePath: filePath, // Store the full relative path used for URL
        thumbnailPath: thumbnailPath, // Store the relative path of the thumbnail
        tags: tags || [], // tags are now handled as an array by validateModel
        isLive: false, // Newly uploaded models are not live by default
      });

      req.session.success = `Model "${model.name}" uploaded successfully!`;
      res.redirect("/dashboard");
    } catch (error) {
      console.error("Error uploading model or generating thumbnail:", error);
      // Clean up uploaded file if DB/thumbnail fails
      if (req.file) {
        await fs.unlink(req.file.path).catch(console.error);
      }
      req.session.error = "Failed to upload model or generate thumbnail.";
      res.redirect("/dashboard/upload");
    }
  }
);

// Edit Model Page
router.get("/edit-model/:id", async (req, res) => {
  const modelId = req.params.id;
  try {
    const model = await Model.findByPk(modelId);
    if (!model || model.username !== req.session.user) {
      req.session.error =
        "Model not found or you don't have permission to edit it.";
      return res.redirect("/dashboard");
    }
    res.render("edit-model", {
      user: res.locals.user,
      model: model,
      error: res.locals.error,
      success: res.locals.success,
    });
  } catch (error) {
    console.error("Error fetching model for edit:", error);
    req.session.error = "Could not load model for editing.";
    res.redirect("/dashboard");
  }
});

// Update Model
router.post(
  "/edit-model/:id",
  validateModel,
  handleValidationErrors,
  async (req, res) => {
    const modelId = req.params.id;
    const { name, tags, isLive } = req.body; // isLive comes as 'on' or undefined from checkbox

    try {
      const model = await Model.findByPk(modelId);
      if (!model || model.username !== req.session.user) {
        req.session.error =
          "Model not found or you don't have permission to edit it.";
        return res.redirect("/dashboard");
      }

      model.name = name;
      model.tags = tags || []; // `tags` is already an array due to `validateModel`
      model.isLive = !!isLive; // Convert 'on' to true, undefined to false

      await model.save();
      req.session.success = `Model "${model.name}" updated successfully!`;
      res.redirect("/dashboard");
    } catch (error) {
      console.error("Error updating model:", error);
      req.session.error = "Failed to update model.";
      res.redirect(`/dashboard/edit-model/${modelId}`);
    }
  }
);

// Delete Model
router.post("/delete-model/:id", async (req, res) => {
  const modelId = req.params.id;
  try {
    const model = await Model.findByPk(modelId);
    if (!model || model.username !== req.session.user) {
      req.session.error =
        "Model not found or you don't have permission to delete it.";
      return res.redirect("/dashboard");
    }

    // Delete model file and thumbnail from disk
    const modelFilePath = path.join(
      __dirname,
      "..",
      "public",
      "uploads",
      model.filePath
    );
    await fs
      .unlink(modelFilePath)
      .catch((err) =>
        console.error(`Failed to delete model file: ${err.message}`)
      );

    if (model.thumbnailPath) {
      const thumbnailFullPath = path.join(
        __dirname,
        "..",
        "public",
        "uploads",
        model.thumbnailPath
      );
      await fs
        .unlink(thumbnailFullPath)
        .catch((err) =>
          console.error(`Failed to delete thumbnail file: ${err.message}`)
        );
    }

    await model.destroy();
    req.session.success = `Model "${model.name}" deleted successfully.`;
    res.redirect("/dashboard");
  } catch (error) {
    console.error("Error deleting model:", error);
    req.session.error = "Failed to delete model.";
    res.redirect("/dashboard");
  }
});

module.exports = router;
